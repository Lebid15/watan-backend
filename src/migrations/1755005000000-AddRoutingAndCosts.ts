import { MigrationInterface, QueryRunner } from 'typeorm';

export class AddRoutingAndCosts1755005000000 implements MigrationInterface {
  name = 'AddRoutingAndCosts1755005000000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // ─────────────────────────────────────────────────────────────
    // 1) تعديلات جدول الطلبات product_orders
    // ─────────────────────────────────────────────────────────────
    // رقم طلب متسلسل + فهرس فريد
    await queryRunner.query(`
      ALTER TABLE "product_orders"
      ADD COLUMN IF NOT EXISTS "orderNo" integer
    `);
    // فهرس فريد
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_indexes WHERE indexname = 'idx_orders_order_no'
        ) THEN
          CREATE UNIQUE INDEX "idx_orders_order_no" ON "product_orders" ("orderNo");
        END IF;
      END $$;
    `);
    // نضبط default للتسلسل (identity) إن لم يكن موجودًا
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name='product_orders' AND column_name='orderNo' AND column_default IS NOT NULL
        ) THEN
          ALTER TABLE "product_orders"
          ALTER COLUMN "orderNo" ADD GENERATED BY DEFAULT AS IDENTITY;
        END IF;
      END $$;
    `);

    // أعمدة التسعير/الربح
    await queryRunner.query(`
      ALTER TABLE "product_orders"
      ADD COLUMN IF NOT EXISTS "sellPriceCurrency" varchar(10) NOT NULL DEFAULT 'USD',
      ADD COLUMN IF NOT EXISTS "sellPriceAmount" numeric(10,2) NOT NULL DEFAULT 0,
      ADD COLUMN IF NOT EXISTS "costCurrency" varchar(10) NOT NULL DEFAULT 'USD',
      ADD COLUMN IF NOT EXISTS "costAmount" numeric(10,2) NOT NULL DEFAULT 0,
      ADD COLUMN IF NOT EXISTS "profitAmount" numeric(10,2) NOT NULL DEFAULT 0
    `);

    // أعمدة الربط الخارجي والمتابعة
    await queryRunner.query(`
      ALTER TABLE "product_orders"
      ADD COLUMN IF NOT EXISTS "providerId" varchar NULL,
      ADD COLUMN IF NOT EXISTS "externalOrderId" varchar NULL,
      ADD COLUMN IF NOT EXISTS "externalStatus" varchar NOT NULL DEFAULT 'not_sent',
      ADD COLUMN IF NOT EXISTS "attempts" integer NOT NULL DEFAULT 0,
      ADD COLUMN IF NOT EXISTS "lastMessage" varchar(250) NULL,
      ADD COLUMN IF NOT EXISTS "manualNote" text NULL,
      ADD COLUMN IF NOT EXISTS "sentAt" timestamptz NULL,
      ADD COLUMN IF NOT EXISTS "lastSyncAt" timestamptz NULL,
      ADD COLUMN IF NOT EXISTS "completedAt" timestamptz NULL,
      ADD COLUMN IF NOT EXISTS "durationMs" integer NULL
    `);

    // ─────────────────────────────────────────────────────────────
    // 2) تعديل جدول الباقات product_packages: publicCode + فهرس فريد
    // ─────────────────────────────────────────────────────────────
    await queryRunner.query(`
      ALTER TABLE "product_packages"
      ADD COLUMN IF NOT EXISTS "publicCode" varchar(40) NULL
    `);
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_indexes WHERE indexname = 'ux_product_packages_public_code'
        ) THEN
          CREATE UNIQUE INDEX "ux_product_packages_public_code" ON "product_packages" ("publicCode");
        END IF;
      END $$;
    `);

    // ─────────────────────────────────────────────────────────────
    // 3) إنشاء جدول سجل التنفيذ order_dispatch_logs
    // ─────────────────────────────────────────────────────────────
    await queryRunner.query(`
      CREATE TABLE IF NOT EXISTS "order_dispatch_logs" (
        "id" uuid PRIMARY KEY,
        "order_id" uuid NOT NULL,
        "action" varchar(20) NOT NULL,
        "result" varchar(10) NOT NULL,
        "message" varchar(250) NULL,
        "payloadSnapshot" jsonb NULL,
        "createdAt" timestamptz NOT NULL DEFAULT NOW(),
        CONSTRAINT "fk_dispatch_order"
          FOREIGN KEY ("order_id") REFERENCES "product_orders"("id")
          ON DELETE CASCADE
      )
    `);
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_indexes WHERE indexname = 'idx_dispatch_logs_order'
        ) THEN
          CREATE INDEX "idx_dispatch_logs_order" ON "order_dispatch_logs" ("order_id");
        END IF;
      END $$;
    `);

    // ─────────────────────────────────────────────────────────────
    // 4) إنشاء جدول توجيه الباقات package_routing
    // ─────────────────────────────────────────────────────────────
    await queryRunner.query(`
      CREATE TABLE IF NOT EXISTS "package_routing" (
        "id" uuid PRIMARY KEY,
        "package_id" uuid NOT NULL,
        "mode" varchar(10) NOT NULL DEFAULT 'manual',
        "primaryProviderId" varchar NULL,
        "fallbackProviderId" varchar NULL,
        CONSTRAINT "fk_routing_package"
          FOREIGN KEY ("package_id") REFERENCES "product_packages"("id")
          ON DELETE CASCADE
      )
    `);
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.table_constraints
          WHERE constraint_name = 'ux_package_routing_package'
            AND table_name = 'package_routing'
        ) THEN
          ALTER TABLE "package_routing"
          ADD CONSTRAINT "ux_package_routing_package" UNIQUE ("package_id");
        END IF;
      END $$;
    `);

    // ─────────────────────────────────────────────────────────────
    // 5) إنشاء جدول تكلفة الباقات لكل مزود package_costs
    // ─────────────────────────────────────────────────────────────
    await queryRunner.query(`
      CREATE TABLE IF NOT EXISTS "package_costs" (
        "id" uuid PRIMARY KEY,
        "package_id" uuid NOT NULL,
        "providerId" varchar NOT NULL,
        "costCurrency" varchar(10) NOT NULL DEFAULT 'USD',
        "costAmount" numeric(10,2) NOT NULL DEFAULT 0,
        CONSTRAINT "fk_pkgcost_package"
          FOREIGN KEY ("package_id") REFERENCES "product_packages"("id")
          ON DELETE CASCADE
      )
    `);
    await queryRunner.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.table_constraints
          WHERE constraint_name = 'ux_package_costs_pkg_provider'
            AND table_name = 'package_costs'
        ) THEN
          ALTER TABLE "package_costs"
          ADD CONSTRAINT "ux_package_costs_pkg_provider" UNIQUE ("package_id", "providerId");
        END IF;
      END $$;
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // حذف الجداول المضافة
    await queryRunner.query(`DROP TABLE IF EXISTS "package_costs"`);
    await queryRunner.query(`DROP TABLE IF EXISTS "package_routing"`);
    await queryRunner.query(`DROP TABLE IF EXISTS "order_dispatch_logs"`);

    // إزالة publicCode + الفهرس
    await queryRunner.query(`
      DO $$
      BEGIN
        IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ux_product_packages_public_code') THEN
          DROP INDEX "ux_product_packages_public_code";
        END IF;
      END $$;
    `);
    await queryRunner.query(`ALTER TABLE "product_packages" DROP COLUMN IF EXISTS "publicCode"`);

    // إزالة أعمدة الطلبات
    await queryRunner.query(`
      DO $$
      BEGIN
        IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_orders_order_no') THEN
          DROP INDEX "idx_orders_order_no";
        END IF;
      END $$;
    `);
    await queryRunner.query(`
      ALTER TABLE "product_orders"
      DROP COLUMN IF EXISTS "durationMs",
      DROP COLUMN IF EXISTS "completedAt",
      DROP COLUMN IF EXISTS "lastSyncAt",
      DROP COLUMN IF EXISTS "sentAt",
      DROP COLUMN IF EXISTS "manualNote",
      DROP COLUMN IF EXISTS "lastMessage",
      DROP COLUMN IF EXISTS "attempts",
      DROP COLUMN IF EXISTS "externalStatus",
      DROP COLUMN IF EXISTS "externalOrderId",
      DROP COLUMN IF EXISTS "providerId",
      DROP COLUMN IF EXISTS "profitAmount",
      DROP COLUMN IF EXISTS "costAmount",
      DROP COLUMN IF EXISTS "costCurrency",
      DROP COLUMN IF EXISTS "sellPriceAmount",
      DROP COLUMN IF EXISTS "sellPriceCurrency",
      DROP COLUMN IF EXISTS "orderNo"
    `);
  }
}
